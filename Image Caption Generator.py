# -*- coding: utf-8 -*-
"""DL_Mini_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n1n-eLdKEAk6kQp4XLSaVgLkfB7Xbeg5

Deep Learining Mini Project- Image caption Generator

Team members:

ABEYRATHNE E.M.K.V.S (2020/E/002)

SILVA K.C.D (2021/E/019)

WIJESOORIYA G.G.P.N (2021/E/040)
"""

#mount drive
from google.colab import drive
drive.mount('/content/drive')

"""Install necessary packages"""

!pip install tensorflow keras pillow numpy tqdm

"""import all the necessary packages"""

import os   # handling the files
import pickle # storing numpy features
import numpy as np
from tqdm.notebook import tqdm # how much data is process till now

from tensorflow.keras.applications.vgg16 import VGG16 , preprocess_input # extract features from image data.
from tensorflow.keras.preprocessing.image import load_img , img_to_array
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Model
from tensorflow.keras.utils import to_categorical, plot_model
from tensorflow.keras.layers import Input , Dense , LSTM , Embedding , Dropout , add

BASE_DIR = '/content/drive/MyDrive/ImageCaptionGenerator'  # Adjust this to your dataset location
WORKING_DIR = '/content/working'  # You can use '/content' for temp work

"""Extracting the feature vector from all images"""

# Load vgg16 Model
model = VGG16()

# restructure model
model = Model(inputs = model.inputs , outputs = model.layers[-2].output)

# Summerize
print(model.summary())

# extract features from image
features = {}
directory = os.path.join(BASE_DIR, 'Images')

for img_name in tqdm(os.listdir(directory)):
    # load the image from file
    img_path = directory + '/' + img_name
    image = load_img(img_path, target_size=(224, 224))
    # convert image pixels to numpy array
    image = img_to_array(image)
    # reshape data for model
    image = image.reshape((1, image.shape[0], image.shape[1], image.shape[2]))
    # preprocess image for vgg
    image = preprocess_input(image)
    # extract features
    feature = model.predict(image, verbose=0)
    # get image ID
    image_id = img_name.split('.')[0]
    # store feature
    features[image_id] = feature

# store features in pickle
import os
import pickle

with open('/content/drive/MyDrive/ImageCaptionGenerator/features.pkl', 'wb') as f:
    pickle.dump(features, f)

print("Features saved successfully!")

import os

file_path = '/content/drive/MyDrive/ImageCaptionGenerator/features.pkl'

if os.path.exists(file_path):
    print("File exists ")
    print("File size:", os.path.getsize(file_path), "bytes")  # Check if file is empty
else:
    print("File not found ")

import pickle

# Load the saved features
with open('/content/drive/MyDrive/ImageCaptionGenerator/features.pkl', 'rb') as f:
    features = pickle.load(f)

print("Features loaded successfully!")

"""Load data sets"""

import os

subfolder = "ImageCaptions"  # Replace with your actual subfolder name
file_path = os.path.join(BASE_DIR, subfolder, 'captions2.txt')

with open(file_path, 'r') as f:
    next(f)  # Skip the first line
    captions_doc = f.read()

# create mapping of image to captions
mapping = {}
# process lines
for line in tqdm(captions_doc.split('\n')):
    # split the line by comma(,)
    tokens = line.split(',')
    if len(line) < 2:
        continue
    image_id, caption = tokens[0], tokens[1:]
    # remove extension from image ID
    image_id = image_id.split('.')[0]
    # convert caption list to string
    caption = " ".join(caption)
    # create list if needed
    if image_id not in mapping:
        mapping[image_id] = []
    # store the caption
    mapping[image_id].append(caption)

len(mapping)

"""
Getting and performing data cleaning"""

def clean(mapping):
    for key, captions in mapping.items():
        for i in range(len(captions)):
            # take one caption at a time
            caption = captions[i]
            # preprocessing steps
            # convert to lowercase
            caption = caption.lower()
            import re
            caption = re.sub(r'[^a-zA-Z ]', '', caption)  # keep only letters and spaces
            caption = re.sub(r'\s+', ' ', caption).strip()  # remove extra spaces

            # add start and end tags to the caption
            caption = 'startseq ' + " ".join([word for word in caption.split() if len(word)>1]) + ' endseq'
            captions[i] = caption

# before preprocess of text
mapping['1000268201_693b08cb0e']

# preprocess the text
clean(mapping)

#after process of text
mapping['1000268201_693b08cb0e']

all_captions = []
for key in mapping:
    for caption in mapping[key]:
        all_captions.append(caption)

len(all_captions)

all_captions[:10]

"""Tokenizing the vocabulary"""

# tokenize the text
tokenizer = Tokenizer()
tokenizer.fit_on_texts(all_captions)
vocab_size = len(tokenizer.word_index) + 1

vocab_size

# get maximum length of the caption available
max_length = max(len(caption.split()) for caption in all_captions)
max_length

"""Train Test Split"""

image_ids = list(mapping.keys())
split = int(len(image_ids) * 0.90)
train = image_ids[:split]
test = image_ids[split:]

batch_size = 32

"""Create Data generator"""

# create data generator to get data in batch (avoids session crash)
import tensorflow as tf

def data_generator(data_keys, mapping, features, tokenizer, max_length, vocab_size, batch_size):
    X1, X2, y = [], [], []
    while True:
        for key in data_keys:
            if key not in features:
                print(f"[Warning] Missing feature for key: {key}")
                continue
            if key not in mapping:
                print(f"[Warning] Missing caption for key: {key}")
                continue

            feature = features[key][0]
            captions = mapping[key]

            for caption in captions:
                seq = tokenizer.texts_to_sequences([caption])[0]
                for i in range(1, len(seq)):
                    in_seq = seq[:i]
                    out_seq = seq[i]

                    in_seq_padded = pad_sequences([in_seq], maxlen=max_length, padding='post')[0]
                    out_seq_onehot = to_categorical([out_seq], num_classes=vocab_size)[0]

                    X1.append(feature)
                    X2.append(in_seq_padded)
                    y.append(out_seq_onehot)

                    if len(X1) == batch_size:
                        yield (np.array(X1, dtype='float32'), np.array(X2, dtype='int32')), np.array(y, dtype='float32')
                        X1, X2, y = [], [], []

# Define output signature
output_signature = (
    (
        tf.TensorSpec(shape=(None, 4096), dtype=tf.float32),  # Image features
        tf.TensorSpec(shape=(None, max_length), dtype=tf.int32)  # Input sequences
    ),
    tf.TensorSpec(shape=(None, vocab_size), dtype=tf.float32)  # Targets
)

# Create dataset
dataset = tf.data.Dataset.from_generator(
    lambda: data_generator(train, mapping, features, tokenizer, max_length, vocab_size, batch_size),
    output_signature=output_signature
)

# Optional: Improve performance
dataset = dataset.prefetch(tf.data.AUTOTUNE)

print(type(train))  # Should be list
print(train[:3])  # Print first 3 elements to understand the structure

# encoder model
# image feature layers
inputs1 = Input(shape=(4096,))
fe1 = Dropout(0.4)(inputs1)
fe2 = Dense(256, activation='relu')(fe1)
# sequence feature layers
inputs2 = Input(shape=(max_length,))
se1 = Embedding(vocab_size, 256, mask_zero=True)(inputs2)
se2 = Dropout(0.4)(se1)
se3 = LSTM(256)(se2)

# decoder model
decoder1 = add([fe2, se3])
decoder2 = Dense(256, activation='relu')(decoder1)
outputs = Dense(vocab_size, activation='softmax')(decoder2)

model = Model(inputs=[inputs1, inputs2], outputs=outputs)
model.compile(loss='categorical_crossentropy', optimizer='adam')

# plot the model
plot_model(model, show_shapes=True)

"""Traning Section"""

print("Model input shapes:")
print(f"Image features input shape: {model.input[0].shape}")
print(f"Caption input shape: {model.input[1].shape}")
print(f"Output shape: {model.output.shape}")

# Get one batch from the dataset
sample_batch = next(iter(dataset))
print("\nDataset output shapes:")
print(f"Image features shape: {sample_batch[0][0].shape}")
print(f"Caption input shape: {sample_batch[0][1].shape}")
print(f"Target shape: {sample_batch[1].shape}")

from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping

epochs = 20
batch_size = 32
steps = len(train) // batch_size

# Callbacks for saving best model and stopping early
checkpoint = ModelCheckpoint(
    '/content/drive/MyDrive/ImageCaptionGenerator/best_model.h5',
    monitor='loss',
    save_best_only=True,
    verbose=1
)

earlystop = EarlyStopping(
    monitor='loss',
    patience=3,
    verbose=1,
    restore_best_weights=True
)

model.fit(
    dataset,
    epochs=epochs,
    steps_per_epoch=steps,
    callbacks=[checkpoint, earlystop],
    verbose=1
)

"""save the model"""

# save the model
model.save(WORKING_DIR+'/CapGen_model3.h5')

"""Caption generating"""

def idx_to_word(integer, tokenizer):
    for word, index in tokenizer.word_index.items():
        if index == integer:
            return word
    return None

# generate caption for an image
def predict_caption(model, image, tokenizer, max_length):
    in_text = 'startseq'
    for i in range(max_length):
        sequence = tokenizer.texts_to_sequences([in_text])[0]
        sequence = pad_sequences([sequence], maxlen=max_length, padding='post')  # Fix applied
        yhat = model.predict([image, sequence], verbose=0)
        yhat = np.argmax(yhat)
        word = tokenizer.index_word.get(yhat)  # Efficient word lookup
        if word is None:
            break
        in_text += ' ' + word
        if word == 'endseq':
            break
    return in_text

from nltk.translate.bleu_score import corpus_bleu
# validate with test data
actual, predicted = list(), list()

for key in tqdm(test):
    # get actual caption
    captions = mapping[key]
    # predict the caption for image
    y_pred = predict_caption(model, features[key], tokenizer, max_length)
    # split into words
    actual_captions = [caption.split() for caption in captions]
    y_pred = y_pred.split()
    # append to the list
    actual.append(actual_captions)
    predicted.append(y_pred)
# calcuate BLEU score
print("BLEU-1: %f" % corpus_bleu(actual, predicted, weights=(1.0, 0, 0, 0)))
print("BLEU-2: %f" % corpus_bleu(actual, predicted, weights=(0.5, 0.5, 0, 0)))

from PIL import Image
import matplotlib.pyplot as plt
def generate_caption(image_name):
    # load the image
    # image_name = "1001773457_577c3a7d70.jpg"
    image_id = image_name.split('.')[0]
    img_path = os.path.join(BASE_DIR, "Images", image_name)
    image = Image.open(img_path)
    captions = mapping[image_id]
    print('---------------------Actual---------------------')
    for caption in captions:
        print(caption)
    # predict the caption
    y_pred = predict_caption(model, features[image_id], tokenizer, max_length)
    print('--------------------Predicted--------------------')
    print(y_pred)
    plt.imshow(image)

generate_caption("1001773457_577c3a7d70.jpg")

generate_caption("101669240_b2d3e7f17b.jpg")